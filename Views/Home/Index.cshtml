@model IEnumerable<GalleryApp.Models.Picture>
@{
    ViewData["Title"] = "Gallery Feed";
}

<div class="gallery-header">
    <div class="header-content">
        <div class="title-section">
            <h1 class="gallery-title">
                <i class="fas fa-images"></i>
                Gallery Feed
            </h1>
            <p class="gallery-subtitle">Discover and share amazing moments</p>
        </div>
        <a asp-action="Upload" class="btn-upload">
            <i class="fas fa-plus"></i>
            Upload Picture
        </a>
    </div>
</div>

@if (Model.Any())
{
    <div class="gallery-stats">
        <div class="stats-item">
            <i class="fas fa-photo-video"></i>
            <span>@Model.Count() Pictures</span>
        </div>
        <div class="stats-item">
            <i class="fas fa-users"></i>
            <span>@Model.Select(p => p.User.Username).Distinct().Count() Contributors</span>
        </div>
    </div>

    <div class="gallery-grid" id="gallery-grid">
        @foreach (var picture in Model)
        {
            <div class="picture-card" data-aos="fade-up">
                <div class="picture-container">
                    <img src="~/Uploads/@picture.FileName" 
                         class="picture-image" 
                         alt="Picture by @picture.User.Username"
                         onclick="openLightbox('@picture.FileName', '@picture.User.Username', '@picture.Description', '@picture.UploadedAt.ToString("MMM dd, yyyy")', @picture.Id)"
                         loading="lazy">
                    
                    <div class="picture-overlay">
                        <div class="overlay-content">
                            <button class="overlay-btn view-btn" onclick="openLightbox('@picture.FileName', '@picture.User.Username', '@picture.Description', '@picture.UploadedAt.ToString("MMM dd, yyyy")', @picture.Id)">
                                <i class="fas fa-eye"></i>
                            </button>
                            @if (picture.UserId == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value))
                            {
                                <button class="overlay-btn delete-btn" onclick="deletePicture(@picture.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <div class="picture-info">
                    <div class="user-info">
                        <div class="user-avatar">
                            @picture.User.Username.Substring(0, 1).ToUpper()
                        </div>
                        <div class="user-details">
                            <h6 class="username">@picture.User.Username</h6>
                            <small class="upload-date">@picture.UploadedAt.ToString("MMM dd, yyyy")</small>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(picture.Description))
                    {
                        <p class="picture-description">@picture.Description</p>
                    }

                    <div class="picture-actions">
                        <button class="action-btn like-btn" onclick="toggleLike(@picture.Id)">
                            <i class="far fa-heart"></i>
                            <span>Like</span>
                        </button>
                        <button class="action-btn comment-btn" onclick="openComments(@picture.Id)">
                            <i class="far fa-comment"></i>
                            <span>Comment</span>
                        </button>
                        <button class="action-btn share-btn" onclick="sharePicture(@picture.Id)">
                            <i class="fas fa-share"></i>
                            <span>Share</span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Load More Button -->
    <div class="load-more-section">
        <button class="btn-load-more" onclick="loadMorePictures()">
            <i class="fas fa-plus"></i>
            Load More Pictures
        </button>
    </div>
}
else
{
    <div class="empty-state">
        <div class="empty-icon">
            <i class="fas fa-camera"></i>
        </div>
        <h3 class="empty-title">No Pictures Yet</h3>
        <p class="empty-description">Be the first to share a moment with the community!</p>
        <a asp-action="Upload" class="btn-upload-empty">
            <i class="fas fa-cloud-upload-alt"></i>
            Upload Your First Picture
        </a>
    </div>
}

<!-- Lightbox Modal -->
<div class="lightbox-modal" id="lightboxModal">
    <div class="lightbox-content">
        <button class="lightbox-close" onclick="closeLightbox()">
            <i class="fas fa-times"></i>
        </button>
        <div class="lightbox-image-container">
            <img id="lightboxImage" src="" alt="" class="lightbox-image">
        </div>
        <div class="lightbox-info">
            <div class="lightbox-user">
                <div class="lightbox-avatar" id="lightboxAvatar"></div>
                <div class="lightbox-user-details">
                    <h6 id="lightboxUsername"></h6>
                    <small id="lightboxDate"></small>
                </div>
            </div>
            <p id="lightboxDescription"></p>
            <div class="lightbox-actions">
                <button class="lightbox-btn like-btn" onclick="toggleLike(currentPictureId)">
                    <i class="far fa-heart"></i>
                    Like
                </button>
                <button class="lightbox-btn download-btn" onclick="downloadPicture()">
                    <i class="fas fa-download"></i>
                    Download
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for deletions -->
<form id="deleteForm" asp-action="DeletePicture" method="post" style="display: none;">
    <input type="hidden" name="id" id="deleteId" />
</form>

<style>
    .gallery-header {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(102, 126, 234, 0.2);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .title-section {
        flex: 1;
    }

    .gallery-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .gallery-subtitle {
        color: #718096;
        font-size: 1.1rem;
        margin: 0;
    }

    .btn-upload {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .btn-upload:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        color: white;
        text-decoration: none;
    }

    .gallery-stats {
        display: flex;
        gap: 2rem;
        margin-bottom: 2rem;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 12px;
        backdrop-filter: blur(10px);
    }

    .stats-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #4a5568;
        font-weight: 500;
    }

    .stats-item i {
        color: #667eea;
    }

    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .picture-card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
    }

    .picture-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }

    .picture-container {
        position: relative;
        overflow: hidden;
        aspect-ratio: 1;
    }

    .picture-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .picture-container:hover .picture-image {
        transform: scale(1.05);
    }

    .picture-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .picture-container:hover .picture-overlay {
        opacity: 1;
    }

    .overlay-content {
        display: flex;
        gap: 1rem;
    }

    .overlay-btn {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .view-btn {
        background: rgba(102, 126, 234, 0.9);
    }

    .delete-btn {
        background: rgba(239, 68, 68, 0.9);
    }

    .overlay-btn:hover {
        transform: scale(1.1);
    }

    .picture-info {
        padding: 1.5rem;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea, #764ba2);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 1rem;
    }

    .user-details {
        flex: 1;
    }

    .username {
        font-weight: 600;
        margin: 0;
        color: #2d3748;
    }

    .upload-date {
        color: #718096;
    }

    .picture-description {
        color: #4a5568;
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .picture-actions {
        display: flex;
        gap: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: none;
        border: none;
        color: #718096;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

    .action-btn:hover {
        color: #667eea;
        background: rgba(102, 126, 234, 0.1);
    }

    .load-more-section {
        text-align: center;
        margin-top: 2rem;
    }

    .btn-load-more {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        border: 2px solid #667eea;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-load-more:hover {
        background: #667eea;
        color: white;
        transform: translateY(-2px);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 20px;
        backdrop-filter: blur(10px);
    }

    .empty-icon {
        font-size: 4rem;
        color: #cbd5e0;
        margin-bottom: 2rem;
    }

    .empty-title {
        color: #2d3748;
        margin-bottom: 1rem;
    }

    .empty-description {
        color: #718096;
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }

    .btn-upload-empty {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .btn-upload-empty:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        color: white;
        text-decoration: none;
    }

    /* Lightbox Styles */
    .lightbox-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        backdrop-filter: blur(5px);
    }

    .lightbox-content {
        max-width: 90vw;
        max-height: 90vh;
        display: flex;
        background: white;
        border-radius: 16px;
        overflow: hidden;
        position: relative;
    }

    .lightbox-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        z-index: 10;
        transition: all 0.3s ease;
    }

    .lightbox-close:hover {
        background: rgba(0, 0, 0, 0.7);
        transform: scale(1.1);
    }

    .lightbox-image-container {
        flex: 2;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8fafc;
    }

    .lightbox-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .lightbox-info {
        flex: 1;
        padding: 2rem;
        min-width: 300px;
        display: flex;
        flex-direction: column;
    }

    .lightbox-user {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .lightbox-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea, #764ba2);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 1.2rem;
    }

    .lightbox-actions {
        display: flex;
        gap: 1rem;
        margin-top: auto;
    }

    .lightbox-btn {
        flex: 1;
        padding: 0.75rem;
        border: 2px solid #667eea;
        background: none;
        color: #667eea;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .lightbox-btn:hover {
        background: #667eea;
        color: white;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .gallery-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .header-content {
            flex-direction: column;
            text-align: center;
        }

        .gallery-title {
            font-size: 2rem;
        }

        .gallery-stats {
            flex-direction: column;
            gap: 1rem;
        }

        .lightbox-content {
            flex-direction: column;
            max-width: 95vw;
            max-height: 95vh;
        }

        .lightbox-info {
            min-width: auto;
        }
    }

    /* Animation classes for AOS */
    [data-aos="fade-up"] {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s ease;
    }

    [data-aos="fade-up"].aos-animate {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    let currentPictureId = null;

    function openLightbox(fileName, username, description, date, pictureId) {
        const modal = document.getElementById('lightboxModal');
        const image = document.getElementById('lightboxImage');
        const usernameEl = document.getElementById('lightboxUsername');
        const descriptionEl = document.getElementById('lightboxDescription');
        const dateEl = document.getElementById('lightboxDate');
        const avatarEl = document.getElementById('lightboxAvatar');

        currentPictureId = pictureId;
        
        image.src = '/Uploads/' + fileName;
        image.alt = 'Picture by ' + username;
        usernameEl.textContent = username;
        descriptionEl.textContent = description || 'No description provided';
        dateEl.textContent = date;
        avatarEl.textContent = username.charAt(0).toUpperCase();

        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
        const modal = document.getElementById('lightboxModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
        currentPictureId = null;
    }

    function deletePicture(pictureId) {
        if (confirm('Are you sure you want to delete this picture? This action cannot be undone.')) {
            document.getElementById('deleteId').value = pictureId;
            document.getElementById('deleteForm').submit();
        }
    }

    function toggleLike(pictureId) {
        // Placeholder for like functionality
        console.log('Toggle like for picture:', pictureId);
        // You can implement AJAX call here to toggle like status
    }

    function openComments(pictureId) {
        // Placeholder for comments functionality
        console.log('Open comments for picture:', pictureId);
        // You can implement comments modal here
    }

    function sharePicture(pictureId) {
        // Placeholder for share functionality
        if (navigator.share) {
            navigator.share({
                title: 'Check out this picture!',
                url: window.location.href
            });
        } else {
            // Fallback to clipboard
            navigator.clipboard.writeText(window.location.href);
            alert('Link copied to clipboard!');
        }
    }

    function downloadPicture() {
        const image = document.getElementById('lightboxImage');
        const link = document.createElement('a');
        link.href = image.src;
        link.download = 'picture.jpg';
        link.click();
    }

    function loadMorePictures() {
        // Placeholder for pagination
        console.log('Load more pictures');
        // You can implement AJAX pagination here
    }

    // Close lightbox on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeLightbox();
        }
    });

    // Close lightbox on backdrop click
    document.getElementById('lightboxModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeLightbox();
        }
    });

    // Simple AOS-like animation on scroll
    document.addEventListener('DOMContentLoaded', function() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('aos-animate');
                }
            });
        });

        document.querySelectorAll('[data-aos]').forEach(el => {
            observer.observe(el);
        });
    });
</script>